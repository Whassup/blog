{"version":3,"sources":["Header/Header.tsx","Pages/Article/Article.tsx","ArticleList/ArticleList.tsx","Pages/Home/Home.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","Article","article","useParams","ArticleList","to","Home","App","className","exact","path","strict","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootElement","document","getElementById","hasChildNodes","hydrate","render"],"mappings":"4LAAaA,EAAS,WAClB,OACI,mCACI,qDACA,gCACI,qCACA,yCACA,+CCJHC,EAAU,WACnB,IAAOC,EAAWC,cAAXD,QACP,OAAQ,qCACJ,cAAC,EAAD,IACA,oDAAsB,4BAAIA,WCLrBE,EAAc,WACvB,OAAO,kCACH,oCACI,6BAAI,cAAC,IAAD,CAAMC,GAAG,0CAAT,mEACJ,+CACA,gCACI,yOAEA,oTAEA,iMAEJ,cAAC,IAAD,CAAMA,GAAG,0CAAT,6BCXCC,EAAO,WAChB,OAAQ,qCACF,cAAC,EAAD,IACJ,cAAC,EAAD,QCoBSC,MApBf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,gBAGlB,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,yBAAlB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOD,OAAK,EAACE,QAAQ,EAAOD,KAAM,QAAlC,SACE,cAAC,EAAD,cCJGE,G,MAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,QCFRQ,EAAcC,SAASC,eAAe,QACxCF,GAAeA,EAAYG,gBAC7BC,kBAAQ,cAAC,EAAD,IAASJ,GAEjBK,iBAAO,cAAC,EAAD,IAASL,GAMlBT,M","file":"static/js/main.66fa3911.chunk.js","sourcesContent":["export const Header = () => {\r\n    return (\r\n        <header>\r\n            <h1>() =&gt; \"rOBERT pRIB\"</h1>\r\n            <nav>\r\n                <a>Home</a>\r\n                <a>About me</a>\r\n                <a>Contact</a>\r\n            </nav>\r\n        </header>\r\n    )\r\n}","import { useParams } from 'react-router-dom';\r\nimport { Header } from '../../Header/Header';\r\n\r\nexport const Article = () => {\r\n    const {article} = useParams<{ article: string}>();\r\n    return (<>\r\n        <Header />\r\n        <p>This is an article <p>{article}</p></p>\r\n  </>)\r\n}","import { Link } from \"react-router-dom\"\r\n\r\nexport const ArticleList = () => {\r\n    return <article>\r\n        <article>\r\n            <h1><Link to=\"/blog/article/how-our-team-writes-tests\">How our team writes React tests and other stuff too</Link></h1>\r\n            <time>5 June 2021</time>\r\n            <div>\r\n                <p>Have you ever worked in a codebase where each test file was different to the next? Different terminology and grouping of test scenarios; different usages of snapshot testing and react-testing-library.</p>\r\n\r\n                <p>The effect of this meant wasted time reading a full test file to understand its structure before adding another test case. Creating new tests involved making multiple decisions; should I copy the structure of an existing test or create a new one? Should I use snapshot tests?</p>\r\n\r\n                <p>We solved this problem by defining guidelines to follow, that make writing tests that are easy to read and write, and would reduced wasted time on decisions.</p>\r\n            </div>\r\n            <Link to=\"/blog/article/how-our-team-writes-tests\">Read more</Link>\r\n        </article>\r\n    </article>\r\n}","import { ArticleList } from \"../../ArticleList/ArticleList\"\r\nimport { Header } from \"../../Header/Header\"\r\n\r\nexport const Home = () => {\r\n    return (<>\r\n          <Header />\r\n      <ArticleList />\r\n    </>)\r\n}","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport { Article } from './Pages/Article/Article';\nimport { Home } from './Pages/Home/Home';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route exact path=\"/blog/about\">\n            {/* <About /> */}\n          </Route>\n          <Route exact path=\"/blog/article/:article\">\n            <Article />\n          </Route>\n          <Route exact strict={false} path={\"/blog\"}>\n            <Home />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport { hydrate, render } from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\n\nconst rootElement = document.getElementById(\"root\");\nif (rootElement && rootElement.hasChildNodes()) {\n  hydrate(<App />, rootElement);\n} else {\n  render(<App />, rootElement);\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}